{"version":3,"sources":["Utils.ts"],"names":[],"mappings":";;;;;AAAA;;GAEG;AACH,sDAA8C;AAC9C,+CAAyC;AAGzC,IAAY,OAGX;AAHD,WAAY,OAAO;IACf,sCAAU,CAAA;IACV,uCAAU,CAAA;AACd,CAAC,EAHW,OAAO,GAAP,eAAO,KAAP,eAAO,QAGlB;AAED;IAAA;IA4DA,CAAC;IA3DG;;OAEG;IACW,SAAG,GAAjB,UAAkB,OAA0B;QACxC,KAAK,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAC,IAAI,CAAC,UAAC,IAAa;YAC5D,IAAM,KAAK,GAAc,IAAI,CAAC,YAAY,CAAC,mBAAS,CAAC,CAAA;YACrD,KAAK,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;YAClD,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACvB,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACW,aAAO,GAArB;QACI,KAAK,CAAC,SAAS,CAAC,6BAA6B,CAAC,CAAC,IAAI,CAAC,UAAC,IAAa;YAC9D,IAAI,CAAC,IAAI,GAAG,aAAa,CAAA;YACzB,KAAK,CAAC,cAAc,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAA;QACvD,CAAC,CAAC,CAAA;IACN,CAAC;IAEa,iBAAW,GAAzB;QACI,IAAM,WAAW,GAAG,KAAK,CAAC,cAAc,EAAE,CAAC,cAAc,CAAC,aAAa,CAAC,CAAA;QACxE,IAAI,WAAW,EAAE;YACb,WAAW,CAAC,gBAAgB,EAAE,CAAA;SACjC;IACL,CAAC;IAED;;OAEG;IACW,eAAS,GAAvB,UAAwB,QAAgB,EAAE,KAAc;QACpD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAG,UAAC,GAAG,EAAE,MAAM;gBACrC,IAAI,GAAG,EAAE;oBACL,eAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAA;oBAClB,MAAM,EAAE,CAAA;iBACX;gBACD,IAAI,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE;oBACpB,IAAM,KAAK,GAAG,EAAE,CAAA;oBAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAG,EAAE;wBAC7B,IAAM,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;wBACnC,IAAI,CAAC,IAAI;4BAAE,MAAM,EAAE,CAAA;wBACnB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;qBACnB;oBACD,OAAO,CAAC,KAAK,CAAC,CAAA;iBAEjB;qBAAM;oBACH,IAAM,IAAI,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;oBACnC,IAAI,CAAC,IAAI;wBAAE,MAAM,EAAE,CAAA;oBACnB,OAAO,CAAC,IAAI,CAAC,CAAA;iBAChB;YACL,CAAC,CAAC,CAAA;QACN,CAAC,CAAC,CAAA;IACN,CAAC;IAEa,oBAAc,GAA5B;QACI,OAAO,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAA;IAClC,CAAC;IACL,YAAC;AAAD,CA5DA,AA4DC,IAAA","file":"","sourceRoot":"../../../../../assets/script/util","sourcesContent":["/**\n * 工具\n */\nimport { log } from \"../core/helper/LogHelper\"\nimport ToastCtrl from \"../ctrl/ToastCtrl\"\nimport { Game } from \"../GameManager\";\n\nexport enum UIlevel {\n    Msg = 1000,\n    Mask = 900\n}\n\nexport default class Utils {\n    /**\n     * tip框\n     */\n    public static tip(content: string[] | string) {\n        Utils.insPrefab('prefab/common/ToastPrefab').then((node: cc.Node) => {\n            const toast: ToastCtrl = node.getComponent(ToastCtrl)\n            Utils.getSceneCanvas().addChild(node, UIlevel.Msg)\n            toast.show(content)\n        })\n    }\n\n    /**\n     * tip框\n     */\n    public static loading() {\n        Utils.insPrefab('prefab/common/LoadingPrefab').then((node: cc.Node) => {\n            node.name = 'loadingNode'\n            Utils.getSceneCanvas().addChild(node, UIlevel.Mask)\n        })\n    }\n\n    public static hideLoading() {\n        const loadingNode = Utils.getSceneCanvas().getChildByName('loadingNode')\n        if (loadingNode) {\n            loadingNode.removeFromParent()\n        }\n    }\n\n    /**\n     * 创建预制件节点\n     */\n    public static insPrefab(ctrlName: string, count?: number) {\n        return new Promise((resolve, reject) => {\n            cc.loader.loadRes(ctrlName,  (err, prefab) => {\n                if (err) {\n                    log(err, ctrlName)\n                    reject()\n                }\n                if (count && count > 0) {\n                    const nodes = []\n                    for (let i = 0; i < count; i ++) {\n                        const node = cc.instantiate(prefab)\n                        if (!node) reject()\n                        nodes.push(node)\n                    }\n                    resolve(nodes)\n\n                } else {\n                    const node = cc.instantiate(prefab)\n                    if (!node) reject()\n                    resolve(node) \n                }\n            })\n        })\n    }\n\n    public static getSceneCanvas(): cc.Node {\n        return cc.Canvas.instance.node\n    }\n}"]}