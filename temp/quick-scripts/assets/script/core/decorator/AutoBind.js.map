{"version":3,"sources":["AutoBind.ts"],"names":[],"mappings":";;;;;AAAA;;;GAGG;AACH,iDAA0C;AAE1C;;;GAGG;AACH,kBAA2D,IAAsB;IAC7E,OAAO,UAAC,MAAW,EAAE,WAAmB;QACpC,eAAG,CAAC,IAAI,GAAG,IAAI,GAAI,IAAI,GAAG,MAAM,GAAG,IAAI,GAAG,WAAW,CAAC,CAAA;QACtD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;QACxB,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YACtB,MAAM,CAAC,YAAY,GAAG,EAAE,CAAA;SAC3B;QACD,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,GAAG,IAAI,CAAA;IAC3C,CAAC,CAAA;AACL,CAAC;AATD,4BASC","file":"","sourceRoot":"../../../../../../assets/script/core/decorator","sourcesContent":["/**\n * 装饰器\n * lear\n */\nimport { log } from \"../helper/LogHelper\";\n\n/**\n * 自动绑定Scene或者Prefab下的组件或者节点\n * @param type \n */\nexport function autoBind<T extends cc.Component | cc.Node>(type: { prototype: T }) {\n    return (target: any, propertyKey: string) => {\n        log(type + ', '  + ', ' + target + ', ' + propertyKey)\n        target.setAutoBind(true)\n        if (!target._autoBindKey) {\n            target._autoBindKey = {}\n        }\n        target._autoBindKey[propertyKey] = type\n    }\n}"]}