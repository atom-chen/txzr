{"version":3,"sources":["../../../../../assets/script/core/assets/script/core/NetManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/script/core","sourcesContent":["/**\n * Sokect管理类\n */\nimport { log } from \"./helper/LogHelper\"\n\nexport enum SocketState {\n    Connect = 0,\n    Disconnect = 1,\n}\n\nexport default class NetManager {\n    private socket\n    private connectCallFunc\n    private state: SocketState\n    private listener: Map <any, any> = new Map()\n    private onceListener: Map <any, any> = new Map()\n\n    public constructor() {\n    }\n\n    public connect(ip, connectCallFunc?: () => any) {\n        this.connectCallFunc = connectCallFunc\n        this.socket = io.connect(ip, {\"force new connection\" : true});\n        this.socket.on(\"connect\", this.onConnect.bind(this))\n        this.socket.on(\"message\", this.onMessage.bind(this))\n        this.socket.on(\"disconnect\", this.onDisconnect.bind(this))\n        this.socket.on(\"error\", this.onError.bind(this))\n    }\n\n    public onConnect() {\n        this.state = SocketState.Connect\n        if (this.connectCallFunc && typeof (this.connectCallFunc) === 'function') {\n            this.connectCallFunc()\n        }\n    }\n\n    public onMessage(message) {\n        try { \n            const msg = JSON.parse(message)\n            this.pubMsg(msg.id, msg.content)\n            log(msg.id, msg.content)\n        } catch (err) { \n            log(err)\n        } \n    }\n\n    public onDisconnect() {\n        this.state = SocketState.Disconnect\n        log('socket disconnect')\n    }\n\n    public onError() {\n        log('socket error')\n    }\n\n    public send(msgId, content, callback?: (content?) => void) {\n        log('send', msgId, content)\n        if (callback && typeof(callback) === 'function') {\n            this.regOnceMsg(msgId, callback)\n        }\n        const msg: any = {}\n        msg.id = msgId\n        if (content) {\n            msg.content = content\n        }\n        this.socket.emit(msg.id, JSON.stringify(msg))\n    }\n\n    /**\n     * 注册单次回调\n     */\n    public regOnceMsg(id, callback: (content?) => void) {\n        if (typeof (callback) !== 'function') {\n            log(`regOnceMsg ${id} callback isn't function`)\n            return\n        }\n        if (false === this.onceListener.has(id)) {\n            this.onceListener.set(id, new Map())\n        }\n        const callbacks = this.onceListener.get(id)\n        callbacks.set(callback, true)\n    }\n\n    /**\n     * 注册消息监听\n     */\n    public regMsg(id, callback: (content?) => void) {\n        if (typeof (callback) !== 'function') {\n            log(`regMsg ${id} callback isn't function`)\n            return\n        }\n        if (false === this.listener.has(id)) {\n            this.listener.set(id, new Map())\n        }\n        const callbacks = this.listener.get(id)\n        callbacks.set(callback, true)\n    }\n\n    /**\n     *  取消消息监听\n     */\n    public unRegMsg(id, callback?: (content?) => void) {\n        const callbacks = this.listener.get(id)\n        if (!callbacks) return\n        if (callback) {\n            callbacks.has(callback) && callbacks.delete(callback)\n        } else {\n            this.listener.delete(id)\n        }\n    }\n\n    /**\n     * 推送消息\n     */\n    private pubMsg(id, content) {\n        log('recv', id, content)\n        if (false === this.listener.has(id)) {\n            return\n        }\n        const callbacks = this.listener.get(id)\n        callbacks.forEach((v, callfunc, m) => {\n            callfunc(content)\n        })\n\n        const callbacksOnce = this.onceListener.get(id)\n        callbacksOnce.forEach((v, callfunc, m) => {\n            callfunc(content)\n        })\n        this.onceListener.delete(id)\n    }\n\n}\n"]}