{"version":3,"sources":["../../../../../assets/script/core/assets/script/core/BaseComponent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/script/core","sourcesContent":["/**\n * 组件基类\n * lear\n */\nimport { errlog, logTime } from \"./helper/LogHelper\";\nimport { Net } from \"../GameManager\";\nconst { ccclass, property } = cc._decorator\n\n@ccclass\nexport default abstract class BaseComponent extends cc.Component {\n    // 是否启用节点自动绑定\n    private _isAutoBind\n    // 自动绑定内容\n    public _autoBindKey\n\n    constructor() {\n        super()\n        this.init()\n    }\n\n    public getAutoBind() {\n        return this._isAutoBind\n    }\n\n    public setAutoBind(flag) {\n        this._isAutoBind = flag\n    }\n\n    public __preload() {\n        if (!this._isAutoBind) {\n            return\n        }\n        logTime('autoBind ==>' + this.name)\n        this.autoBind(this.node, this)\n        logTime('autoBind ==>' + this.name, true)\n    } \n\n    private autoBind(node: cc.Node, target) {\n        node.children.forEach(childNode => {\n            const name = childNode.name\n            const type = this._autoBindKey && this._autoBindKey[name]\n            if (type) {\n                if (type === cc.Node) {\n                    target[name] = childNode\n                } else {\n                    target[name] = childNode.getComponent(type)\n                }\n            }\n            this.autoBind(childNode, target)\n        })\n    }\n\n    public init() {\n\n    }\n\n    /**\n     * 获取子节点\n     * @param pathName 路径名\n     */\n    public getChild(pathName: string): cc.Node {\n        if (pathName) {\n            return cc.find(pathName, this.node)\n        } else {\n            errlog(`getChild ${pathName} not found`)\n        }\n    }\n\n    /**\n     * 获取子节点组件\n     * @param pathName 路径名\n     * @param type 组件名\n     */\n    public getComp<T extends cc.Component>(pathName: string, type: { prototype: T}): T {\n        const node = this.getChild(pathName)\n        if (!node) {\n            return \n        }\n        const comp = node.getComponent(type)\n        if (!comp) {\n            errlog(`getComp ${pathName} not found componment`)\n            return\n        }\n        return comp\n    }\n\n    /**\n     * 获取子节点或组件\n     */\n    public getEasy(pathName: string, type?): any {\n        if (pathName) {\n            const node: cc.Node = cc.find(pathName, this.node)\n            if (type && node) {\n                const comp = node.getComponent(type)\n                return comp\n            } else {\n                return node\n            }\n        } else {\n            errlog(`getChild ${pathName} not found`)\n        }\n    }\n\n    /**\n     * 绑定监听\n     * @param obj 绑定对象\n     * @param callBack 回调事件\n     * @param eventType 触控类型（默认点击抬起）\n     */\n    public bindTouch(obj: cc.Node | cc.Component, callBack: (event: cc.Event.EventCustom) => void, eventType: string = cc.Node.EventType.TOUCH_END) {\n        const node = obj instanceof cc.Node ? obj : obj.node \n        if (node) {\n            node.on(eventType, callBack, this)\n        }\n        return obj\n    }\n\n    /**\n     * 请求数据\n     */\n    public send(msgId, content, callback?: (data?) => void) {\n        return new Promise((resolve, reject) => {\n            Net.send(msgId, content, data => {\n                callback && callback(data)\n                resolve(data)\n            })\n        })\n    }\n\n    /**\n     * 监听网络数据回调\n     */\n    public regMsg(msgId, callback?: (data?) => void) {\n        return new Promise((resolve, reject) => {\n            Net.regMsg(msgId, data => {\n                callback && callback(data)\n                resolve(data)\n            })\n        })\n    }\n\n}\n    "]}